#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
树莓派综合传感器系统
整合了以下功能：
1. 温湿度传感器（DHT11）读取与显示在LCD 1602A上
2. PIR人体红外传感器检测
3. 舵机控制

作者：整合自原有单独文件
日期：2025-04-04
'''

import RPi.GPIO as GPIO
import time
import dht11

# ===== 引脚配置 =====
# DHT11温湿度传感器
DHT_PIN = 4  # GPIO4

# LCD 1602A显示屏
LCD_RS = 26  # GPIO26
LCD_E = 19   # GPIO19
LCD_D4 = 13  # GPIO13
LCD_D5 = 6   # GPIO6
LCD_D6 = 5   # GPIO5
LCD_D7 = 11  # GPIO11

# PIR人体红外传感器
PIR_PIN = 17  # GPIO17

# 舵机
SERVO_PIN = 18  # GPIO18

# ===== LCD显示屏常量 =====
LCD_WIDTH = 16    # LCD字符宽度
LCD_LINE_1 = 0x80 # LCD第一行RAM地址
LCD_LINE_2 = 0xC0 # LCD第二行RAM地址
LCD_LINE_3 = 0x94 # LCD第三行RAM地址（如果有）
LCD_LINE_4 = 0xD4 # LCD第四行RAM地址（如果有）
LCD_CHR = True    # 发送数据
LCD_CMD = False   # 发送命令
E_PULSE = 0.0005  # E脉冲宽度
E_DELAY = 0.0005  # E延迟

# ===== LCD显示屏函数 =====
def lcd_init():
    '''初始化LCD显示屏'''
    # 设置GPIO
    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(LCD_E, GPIO.OUT)
    GPIO.setup(LCD_RS, GPIO.OUT)
    GPIO.setup(LCD_D4, GPIO.OUT)
    GPIO.setup(LCD_D5, GPIO.OUT)
    GPIO.setup(LCD_D6, GPIO.OUT)
    GPIO.setup(LCD_D7, GPIO.OUT)

    # 初始化显示
    lcd_byte(0x33, LCD_CMD) # 110011 初始化
    lcd_byte(0x32, LCD_CMD) # 110010 初始化
    lcd_byte(0x06, LCD_CMD) # 000110 光标移动方向
    lcd_byte(0x0C, LCD_CMD) # 001100 显示开，光标关
    lcd_byte(0x28, LCD_CMD) # 101000 数据长度，行数，字体大小
    lcd_byte(0x01, LCD_CMD) # 000001 清屏
    time.sleep(E_DELAY)

def lcd_byte(bits, mode):
    '''向LCD发送一个字节'''
    # 设置RS引脚
    GPIO.output(LCD_RS, mode)

    # 发送高4位
    GPIO.output(LCD_D4, False)
    GPIO.output(LCD_D5, False)
    GPIO.output(LCD_D6, False)
    GPIO.output(LCD_D7, False)
    if bits & 0x10 == 0x10:
        GPIO.output(LCD_D4, True)
    if bits & 0x20 == 0x20:
        GPIO.output(LCD_D5, True)
    if bits & 0x40 == 0x40:
        GPIO.output(LCD_D6, True)
    if bits & 0x80 == 0x80:
        GPIO.output(LCD_D7, True)

    # 使能脉冲
    lcd_toggle_enable()

    # 发送低4位
    GPIO.output(LCD_D4, False)
    GPIO.output(LCD_D5, False)
    GPIO.output(LCD_D6, False)
    GPIO.output(LCD_D7, False)
    if bits & 0x01 == 0x01:
        GPIO.output(LCD_D4, True)
    if bits & 0x02 == 0x02:
        GPIO.output(LCD_D5, True)
    if bits & 0x04 == 0x04:
        GPIO.output(LCD_D6, True)
    if bits & 0x08 == 0x08:
        GPIO.output(LCD_D7, True)

    # 使能脉冲
    lcd_toggle_enable()

def lcd_toggle_enable():
    '''触发使能脉冲'''
    time.sleep(E_DELAY)
    GPIO.output(LCD_E, True)
    time.sleep(E_PULSE)
    GPIO.output(LCD_E, False)
    time.sleep(E_DELAY)

def lcd_string(message, line):
    '''向LCD发送字符串'''
    message = message.ljust(LCD_WIDTH, " ")
    lcd_byte(line, LCD_CMD)

    for i in range(LCD_WIDTH):
        lcd_byte(ord(message[i]), LCD_CHR)

def lcd_clear():
    '''清除LCD显示'''
    lcd_byte(0x01, LCD_CMD)
    time.sleep(E_DELAY)

# ===== 舵机控制函数 =====
def servo_init():
    '''初始化舵机'''
    GPIO.setup(SERVO_PIN, GPIO.OUT)
    global pwm
    pwm = GPIO.PWM(SERVO_PIN, 50)  # 50Hz频率
    pwm.start(0)
    print("舵机初始化完成")

def set_angle(angle):
    '''设置舵机角度'''
    if angle < 0:
        angle = 0
    elif angle > 180:
        angle = 180
        
    duty = 2 + (angle / 18)
    GPIO.output(SERVO_PIN, True)
    pwm.ChangeDutyCycle(duty)
    time.sleep(0.3)  # 给舵机时间移动到位
    GPIO.output(SERVO_PIN, False)
    pwm.ChangeDutyCycle(0)  # 停止脉冲，防止抖动

# ===== PIR人体红外传感器函数 =====
def pir_init():
    '''初始化PIR传感器'''
    GPIO.setup(PIR_PIN, GPIO.IN)
    print(f"PIR传感器初始化在GPIO{PIR_PIN}")
    
    # 等待PIR传感器初始化（需要一段时间稳定）
    print("等待PIR传感器稳定...")
    time.sleep(2)
    print("PIR传感器就绪")

def check_motion():
    '''检查是否有运动'''
    return GPIO.input(PIR_PIN)

# ===== 智能控制逻辑 =====
def decide_vent_position(temp, humidity, motion_detected, last_motion_time, current_time):
    '''根据传感器数据决定通风口位置'''
    # 配置参数
    TEMP_HIGH = 26  # 高温阈值（摄氏度）
    TEMP_LOW = 18   # 低温阈值（摄氏度）
    HUMIDITY_HIGH = 70  # 高湿度阈值（百分比）
    NO_MOTION_CLOSE_TIME = 300  # 无人检测多长时间后关闭通风口（秒）
    
    # 默认位置：半开（90度）
    position = 90
    reason = "正常通风状态"
    
    # 根据温度调整
    if temp > TEMP_HIGH:
        position = 180  # 温度高，完全打开
        reason = f"温度过高 ({temp}°C)"
    elif temp < TEMP_LOW:
        position = 0  # 温度低，关闭
        reason = f"温度过低 ({temp}°C)"
    
    # 根据湿度调整（仅当温度在正常范围内）
    if TEMP_LOW <= temp <= TEMP_HIGH and humidity > HUMIDITY_HIGH:
        position = 180  # 湿度高，完全打开
        reason = f"湿度过高 ({humidity}%)"
    
    # 根据人体检测调整
    no_motion_time = current_time - last_motion_time
    if not motion_detected and no_motion_time > NO_MOTION_CLOSE_TIME:
        # 长时间无人，关闭通风口以节能
        position = 0
        reason = f"无人检测 ({int(no_motion_time//60)}分钟)"
    
    return position, reason

# ===== 主程序 =====
def main():
    try:
        # 设置GPIO模式
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        GPIO.cleanup()  # 清理之前可能的设置
        
        # 初始化LCD
        lcd_init()
        print("LCD屏幕初始化完成")
        
        # 初始化DHT11
        dht_sensor = dht11.DHT11(pin=DHT_PIN)
        print("DHT11温湿度传感器初始化完成")
        
        # 初始化舵机
        servo_init()
        
        # 初始化PIR传感器
        pir_init()
        
        # 显示欢迎信息
        lcd_string("Smart Air Vent", LCD_LINE_1)
        lcd_string("Initializing...", LCD_LINE_2)
        time.sleep(2)
        
        motion_count = 0
        last_motion_time = time.time()  # 初始时间设为当前
        error_count = 0
        servo_position = 90  # 舵机初始位置设为半开
        set_angle(servo_position)  # 设置初始位置
        last_detected_motion = False  # 上次是否检测到运动
        display_toggle_time = time.time()  # 上次切换显示的时间
        last_vent_change_time = 0  # 上次更改通风口的时间
        current_reason = "初始状态"  # 当前通风口位置的原因
        
        print("系统启动完成，开始监测...")
        
        while True:
            current_time = time.time()
            time_str = time.strftime("%H:%M:%S")
            
            # 1. 读取DHT11温湿度数据
            result = dht_sensor.read()
            current_second = int(time.strftime("%S"))
            display_mode = (current_second // 5) % 3  # 每5秒切换一次显示模式 (0=温湿度, 1=PIR数据, 2=通风口状态)
            
            if result.is_valid():
                temp = result.temperature
                humidity = result.humidity
                
                # 检测当前运动状态
                current_motion = check_motion()
                if current_motion and not last_detected_motion:
                    if current_time - last_motion_time > 1:  # 避免连续触发
                        motion_count += 1
                        print(f"[{time_str}] 检测到运动！总计: {motion_count}次")
                        last_motion_time = current_time
                
                # 更新运动状态
                last_detected_motion = current_motion
                
                # 决定通风口位置
                if current_time - last_vent_change_time > 10:  # 每10秒最多调整一次通风口位置
                    new_position, reason = decide_vent_position(
                        temp, humidity, current_motion, last_motion_time, current_time
                    )
                    
                    # 如果位置需要变化，控制舵机
                    if new_position != servo_position:
                        print(f"[{time_str}] 调整通风口: {servo_position}° -> {new_position}° (原因: {reason})")
                        servo_position = new_position
                        set_angle(servo_position)
                        current_reason = reason
                        last_vent_change_time = current_time
                
                # 根据显示模式决定显示内容
                if display_mode == 0:  # 显示温湿度
                    temp_str = f"Temp: {temp}C"
                    hum_str = f"Hum: {humidity}% {time_str[-5:]}"
                    
                    lcd_string(temp_str, LCD_LINE_1)
                    lcd_string(hum_str, LCD_LINE_2)
                elif display_mode == 1:  # 显示PIR数据
                    lcd_string("Motion Detector", LCD_LINE_1)
                    status = "ACTIVE" if current_motion else "Inactive"
                    lcd_string(f"Status: {status}", LCD_LINE_2)
                else:  # 显示通风口状态
                    vent_status = "开" if servo_position > 0 else "关"
                    if 0 < servo_position < 180:
                        vent_status = f"{int(servo_position/180*100)}%"
                    
                    lcd_string(f"Vent: {vent_status}", LCD_LINE_1)
                    lcd_string(f"Reason: {current_reason[:16]}", LCD_LINE_2)  # 限制在16字符以内
                
                print(f"[{time_str}] 温度: {temp}°C, 湿度: {humidity}%, 通风口: {servo_position}°")
                error_count = 0
            else:
                error_count += 1
                print(f"[{time_str}] 读取传感器失败，尝试次数: {error_count}")
                
                if error_count > 5:
                    lcd_string("Sensor Error!", LCD_LINE_1)
                    lcd_string("Check Connection", LCD_LINE_2)
            
            # PIR传感器检测已在上面的温湿度处理部分集成了
            
            # 暂停一段时间，减少CPU使用
            time.sleep(1)
            
            # 暂停一段时间，减少CPU使用
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\n程序已退出")
    finally:
        lcd_string("System Shutdown", LCD_LINE_1)
        lcd_string("Goodbye!", LCD_LINE_2)
        time.sleep(1)
        
        # 清理并关闭
        if 'pwm' in globals():
            pwm.stop()
        GPIO.cleanup()
        print("系统已关闭，GPIO已清理")

if __name__ == "__main__":
    main()
